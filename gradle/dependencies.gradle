repositories {
    maven {
        // Jest is in Sonatype OSS
        url 'https://oss.sonatype.org/content/groups/public/'
    }
}

ext {
    versions = [:]
    libraries = [:]
}

versions.es = '1.4.4'
versions.guava = '18.0'
versions.jackson = '2.5.1'
versions.slf4j = '1.7.7'

libraries.guava = "com.google.guava:guava:$versions.guava"
libraries.hamcrest = "org.hamcrest:hamcrest-all:1.3"

configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            switch (details.requested.name) {
                case 'guava':
                    details.useTarget libraries.guava
                    break
                case 'junit':
                case 'junit-dep':
                    details.useTarget 'junit:junit:4.11'
                    break
                case 'slf4j-api':
                    details.useVersion versions.slf4j
                    break
                case 'log4j':
                    details.useTarget "org.slf4j:log4j-over-slf4j:$versions.slf4j"
                    break
                case 'commons-logging':
                    details.useTarget "org.slf4j:jcl-over-slf4j:$versions.slf4j"
                    break
                case 'hamcrest-core':
                    // ElasticSearchIntegrationTest requires hamcrest-all, but it doesn't come in transitively
                    details.useTarget libraries.hamcrest
                    break
            }
        }
    }
}

dependencies {
    compile libraries.guava
    compile 'com.google.auto.value:auto-value:1.0'
    compile 'com.google.code.findbugs:jsr305:3.0.0'

    compile "org.elasticsearch:elasticsearch:$versions.es"
    compile 'joda-time:joda-time:2.7'
    compile "com.fasterxml.jackson.core:jackson-databind:$versions.jackson"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:$versions.jackson"

    testCompile "com.netflix.nebula:nebula-test:$gradle.gradleVersion.+"
    testCompile "com.google.guava:guava-testlib:$versions.guava"
    testCompile 'com.github.tlrx:elasticsearch-test:1.2.1'
}

// Attempt to get out of Gradle dependency hell (at least somewhat reflect the runtime classloading scheme ) by
// reordering the runtime classpath so gradleApi() comes after other runtime classpath dependencies
configurations {
    gradleApi
}

dependencies {
    gradleApi gradleApi()
}

sourceSets.each {
    it.compileClasspath = it.compileClasspath - configurations.gradleApi + configurations.gradleApi
    it.runtimeClasspath = it.runtimeClasspath - configurations.gradleApi + configurations.gradleApi
}
